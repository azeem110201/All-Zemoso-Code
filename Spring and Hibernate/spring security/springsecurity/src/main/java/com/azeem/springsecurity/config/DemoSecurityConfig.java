package com.azeem.springsecurity.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;

import javax.sql.DataSource;

@Configuration
@EnableWebSecurity
public class DemoSecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    private DataSource securityDataSource;  // inject the data source created in DemoAppConfig;

    // adding users for in memory authentication
//    @Override
//    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//
//        User.UserBuilder userBuilder = User.withDefaultPasswordEncoder();
//
//        auth.inMemoryAuthentication()
//                .withUser(userBuilder.username("john").password("test123").roles("EMPLOYEE"))
//                .withUser(userBuilder.username("mary").password("test123").roles("MANAGER", "EMPLOYEE"))
//                .withUser(userBuilder.username("susan").password("test123").roles("ADMIN", "EMPLOYEE"));
//    }

//    // configure security web paths such as login, logout etc for any levels of access..
//    @Override
//    protected  void configure(HttpSecurity http) throws Exception {
//        http.authorizeRequests()                   // restrict access based on HttpServletRequest
//                .anyRequest().authenticated()     // any request that comes must be authenticated
//                .and()
//                .formLogin()                      // customize login/logout page
//                .loginPage("/showMyLoginPage")    // show custom page
//                .loginProcessingUrl("/authenticateTheUser") // spring security will go to this URL and checks the userid and password etc. Note: We don't need to provide the controller mapping for this URL. It is automatically generated by spring
//                .permitAll()
//                .and()
//                .logout()  // logout of the session
//                .permitAll();
//    }

    // configure security web paths such as login, logout etc for specified levels of securities
    @Override
    protected  void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()                   // restrict access based on HttpServletRequest
                .antMatchers("/").hasRole("EMPLOYEE")
                .antMatchers("/leaders/**").hasRole("MANAGER")
                .antMatchers("/systems/**").hasRole("ADMIN")  // any request that comes must be authenticated
                .and()
                .formLogin()                      // customize login/logout page
                .loginPage("/showMyLoginPage")    // show custom page
                .loginProcessingUrl("/authenticateTheUser") // spring security will go to this URL and checks the userid and password etc. Note: We don't need to provide the controller mapping for this URL. It is automatically generated by spring
                .permitAll()
                .and()
                .logout()  // logout of the session
                .permitAll()
                .and()
                .exceptionHandling()
                .accessDeniedPage("/access-denied");
    }

        @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        // using jdbc authentication
            auth.jdbcAuthentication().dataSource(securityDataSource);
    }
}
